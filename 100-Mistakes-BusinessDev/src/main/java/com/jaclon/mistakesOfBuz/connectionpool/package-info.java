/**
 * 连接池和连接分离的 API：有一个 XXXPool 类负责连接池实现，先从其获得连接
 * XXXConnection，然后用获得的连接进行服务端请求，完成后使用者需要归还连接。通
 * 常，XXXPool 是线程安全的，可以并发获取和归还连接，而 XXXConnection 是非线程
 * 安全的。对应到连接池的结构示意图中，XXXPool 就是右边连接池那个框，左边的客户
 * 端是我们自己的代码。
 *
 * 内部带有连接池的 API：对外提供一个 XXXClient 类，通过这个类可以直接进行服务端
 * 请求；这个类内部维护了连接池，SDK 使用者无需考虑连接的获取和归还问题。一般而
 * 言，XXXClient 是线程安全的。对应到连接池的结构示意图中，整个 API 就是蓝色框包
 * 裹的部分。
 *
 * 非连接池的 API：一般命名为 XXXConnection，以区分其是基于连接池还是单连接的，
 * 而不建议命名为 XXXClient 或直接是 XXX。直接连接方式的 API 基于单一连接，每次使
 * 用都需要创建和断开连接，性能一般，且通常不是线程安全的。对应到连接池的结构示
 * 意图中，这种形式相当于没有右边连接池那个框，客户端直接连接服务端创建连接。
 *
 *
 * 最大连接数不是设置得越大越好。如果设置得太大，不仅仅是客户端需要耗费过多的资
 * 源维护连接，更重要的是由于服务端对应的是多个客户端，每一个客户端都保持大量的连接，会给服务端带来更大的压力。这个压力又不仅仅是内存压力，可以想一下如果服务端的
 * 网络模型是一个 TCP 连接一个线程，那么几千个连接意味着几千个线程，如此多的线程会
 * 造成大量的线程切换开销。
 * 对类似数据库连接池的重要资源进行持续检测，并设置一半的使用量作为报警阈值，出现预警后及时扩容。
 *
 *
 * 有了连接池之后，获取连接是从连接池获取，没有足够连接时连接池会创建连接。这
 * 时，获取连接操作往往有两个超时时间：一个是从连接池获取连接的最长等待时间，通
 * 常叫作请求超时 connectRequestTimeout 或等待超时 connectWaitTimeout；一个是
 * 连接池新建 TCP 连接三次握手的连接超时，通常叫作连接超时 connectTimeout。针对
 * JedisPool、Apache HttpClient 和 Hikari 数据库连接池，你知道如何设置这 2 个参数
 * 吗？
 *
 * @author jaclon
 * @date 2021/5/15
 */
package com.jaclon.mistakesOfBuz.connectionpool;